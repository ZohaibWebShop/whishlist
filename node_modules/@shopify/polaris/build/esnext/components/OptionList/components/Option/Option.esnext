import React, { useCallback } from 'react';
import { TickMinor } from '@shopify/polaris-icons';
import { useToggle } from '../../../../utilities/use-toggle.esnext';
import { classNames, variationName } from '../../../../utilities/css.esnext';
import styles from './Option.scss.esnext';
import { Checkbox as Checkbox$1 } from '../Checkbox/Checkbox.esnext';
import { useFeatures } from '../../../../utilities/features/hooks.esnext';
import { Checkbox } from '../../../Checkbox/Checkbox.esnext';
import { HorizontalStack } from '../../../HorizontalStack/HorizontalStack.esnext';
import { Icon } from '../../../Icon/Icon.esnext';
import { Scrollable } from '../../../Scrollable/Scrollable.esnext';

function Option({
  label,
  value,
  id,
  select,
  active,
  allowMultiple,
  disabled,
  role,
  media,
  onClick,
  section,
  index,
  verticalAlign,
  onPointerEnter,
  onFocus
}) {
  const {
    value: focused,
    toggle: toggleFocused
  } = useToggle(false);
  const {
    polarisSummerEditions2023
  } = useFeatures();
  const handleClick = useCallback(() => {
    if (disabled) {
      return;
    }
    onClick(section, index);
  }, [disabled, index, onClick, section]);
  const handlePointerEnter = useCallback(() => {
    if (disabled) {
      return;
    }
    onPointerEnter(section, index);
  }, [disabled, onPointerEnter, section, index]);
  const handleFocus = useCallback(() => {
    toggleFocused();
    onFocus(section, index);
  }, [toggleFocused, onFocus, section, index]);
  const mediaMarkup = media ? /*#__PURE__*/React.createElement("div", {
    className: styles.Media
  }, media) : null;
  const singleSelectClassName = classNames(styles.SingleSelectOption, focused && styles.focused, disabled && styles.disabled, select && styles.select, active && styles.active, verticalAlign && styles[variationName('verticalAlign', verticalAlign)]);
  const multiSelectClassName = classNames(styles.Label, disabled && styles.disabled, active && styles.active, select && styles.select, verticalAlign && styles[variationName('verticalAlign', verticalAlign)], polarisSummerEditions2023 && allowMultiple && styles.CheckboxLabel, polarisSummerEditions2023 && allowMultiple && styles.MultiSelectOption);
  const checkBoxRole = role === 'option' ? 'presentation' : undefined;
  const optionMarkup = allowMultiple ? /*#__PURE__*/React.createElement("label", {
    htmlFor: id,
    className: multiSelectClassName
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.Checkbox
  }, polarisSummerEditions2023 ? /*#__PURE__*/React.createElement(Checkbox, {
    id: id,
    label: "",
    ariaDescribedBy: `${id}-label`,
    value: value,
    checked: select,
    disabled: disabled,
    onChange: handleClick
  }) : /*#__PURE__*/React.createElement(Checkbox$1, {
    id: id,
    value: value,
    checked: select,
    active: active,
    disabled: disabled,
    onChange: handleClick,
    role: checkBoxRole
  })), mediaMarkup, polarisSummerEditions2023 ? /*#__PURE__*/React.createElement("span", {
    id: `${id}-label`
  }, label) : label) : /*#__PURE__*/React.createElement("button", {
    id: id,
    type: "button",
    className: singleSelectClassName,
    onClick: handleClick,
    disabled: disabled,
    onFocus: handleFocus,
    onBlur: toggleFocused,
    "aria-pressed": polarisSummerEditions2023 ? active || select : active
  }, polarisSummerEditions2023 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HorizontalStack, {
    wrap: false,
    blockAlign: verticalAlignToBlockAlign(verticalAlign)
  }, mediaMarkup, label), (select || active) && /*#__PURE__*/React.createElement("span", {
    className: styles.Icon
  }, /*#__PURE__*/React.createElement(Icon, {
    source: TickMinor
  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, mediaMarkup, label));
  const scrollMarkup = active ? /*#__PURE__*/React.createElement(Scrollable.ScrollTo, null) : null;
  return /*#__PURE__*/React.createElement("li", {
    key: id,
    className: styles.Option,
    tabIndex: -1,
    onPointerEnter: handlePointerEnter
  }, scrollMarkup, optionMarkup);
}
function verticalAlignToBlockAlign(verticalAlign) {
  switch (verticalAlign) {
    case 'top':
      return 'start';
    case 'center':
      return 'center';
    case 'bottom':
      return 'end';
    default:
      return 'start';
  }
}

export { Option };

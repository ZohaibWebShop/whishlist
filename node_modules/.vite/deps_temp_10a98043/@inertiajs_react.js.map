{
  "version": 3,
  "sources": ["../../@inertiajs/react/src/index.ts", "../../@inertiajs/react/src/createInertiaApp.ts", "../../@inertiajs/react/src/App.ts", "../../@inertiajs/react/src/HeadContext.ts", "../../@inertiajs/react/src/PageContext.ts", "../../@inertiajs/react/src/Head.ts", "../../@inertiajs/react/src/Link.ts", "../../@inertiajs/react/src/useForm.ts", "../../@inertiajs/react/src/useRemember.ts", "../../@inertiajs/react/src/usePage.ts"],
  "sourcesContent": ["import { router as Router } from '@inertiajs/core'\n\nexport const router = Router\nexport { default as createInertiaApp } from './createInertiaApp'\nexport { default as Head } from './Head'\nexport { default as Link, InertiaLinkProps } from './Link'\nexport { default as useForm } from './useForm'\nexport { default as usePage } from './usePage'\nexport { default as useRemember } from './useRemember'\n", "import { Page, PageProps, PageResolver, setupProgress } from '@inertiajs/core'\nimport { ComponentType, createElement, FunctionComponent, Key, ReactElement, ReactNode } from 'react'\nimport { renderToString } from 'react-dom/server'\nimport App from './App'\n\ntype ReactInstance = ReactElement\ntype ReactComponent = ReactNode\n\ntype HeadManagerOnUpdate = (elements: string[]) => void // TODO: When shipped, replace with: Inertia.HeadManagerOnUpdate\ntype HeadManagerTitleCallback = (title: string) => string // TODO: When shipped, replace with: Inertia.HeadManagerTitleCallback\n\ntype AppType<SharedProps extends PageProps = PageProps> = FunctionComponent<\n  {\n    children?: (props: { Component: ComponentType; key: Key; props: Page<SharedProps>['props'] }) => ReactNode\n  } & SetupOptions<unknown, SharedProps>['props']\n>\n\nexport type SetupOptions<ElementType, SharedProps extends PageProps> = {\n  el: ElementType\n  App: AppType\n  props: {\n    initialPage: Page<SharedProps>\n    initialComponent: ReactComponent\n    resolveComponent: PageResolver\n    titleCallback?: HeadManagerTitleCallback\n    onHeadUpdate?: HeadManagerOnUpdate\n  }\n}\n\ntype BaseInertiaAppOptions = {\n  title?: HeadManagerTitleCallback\n  resolve: PageResolver\n}\n\ntype CreateInertiaAppSetupReturnType = ReactInstance | void\ntype InertiaAppOptionsForCSR<SharedProps extends PageProps> = BaseInertiaAppOptions & {\n  id?: string\n  page?: Page | string\n  render?: undefined\n  progress?:\n    | false\n    | {\n        delay?: number\n        color?: string\n        includeCSS?: boolean\n        showSpinner?: boolean\n      }\n  setup(options: SetupOptions<HTMLElement, SharedProps>): CreateInertiaAppSetupReturnType\n}\n\ntype CreateInertiaAppSSRContent = { head: string[]; body: string }\ntype InertiaAppOptionsForSSR<SharedProps extends PageProps> = BaseInertiaAppOptions & {\n  id?: undefined\n  page: Page | string\n  render: typeof renderToString\n  progress?: undefined\n  setup(options: SetupOptions<null, SharedProps>): ReactInstance\n}\n\nexport default async function createInertiaApp<SharedProps extends PageProps = PageProps>(\n  options: InertiaAppOptionsForCSR<SharedProps>,\n): Promise<CreateInertiaAppSetupReturnType>\nexport default async function createInertiaApp<SharedProps extends PageProps = PageProps>(\n  options: InertiaAppOptionsForSSR<SharedProps>,\n): Promise<CreateInertiaAppSSRContent>\nexport default async function createInertiaApp<SharedProps extends PageProps = PageProps>({\n  id = 'app',\n  resolve,\n  setup,\n  title,\n  progress = {},\n  page,\n  render,\n}: InertiaAppOptionsForCSR<SharedProps> | InertiaAppOptionsForSSR<SharedProps>): Promise<\n  CreateInertiaAppSetupReturnType | CreateInertiaAppSSRContent\n> {\n  const isServer = typeof window === 'undefined'\n  const el = isServer ? null : document.getElementById(id)\n  const initialPage = page || JSON.parse(el.dataset.page)\n  // @ts-expect-error\n  const resolveComponent = (name) => Promise.resolve(resolve(name)).then((module) => module.default || module)\n\n  let head = []\n\n  const reactApp = await resolveComponent(initialPage.component).then((initialComponent) => {\n    return setup({\n      // @ts-expect-error\n      el,\n      App,\n      props: {\n        initialPage,\n        initialComponent,\n        resolveComponent,\n        titleCallback: title,\n        onHeadUpdate: isServer ? (elements) => (head = elements) : null,\n      },\n    })\n  })\n\n  if (!isServer && progress) {\n    setupProgress(progress)\n  }\n\n  if (isServer) {\n    const body = await render(\n      createElement(\n        'div',\n        {\n          id,\n          'data-page': JSON.stringify(initialPage),\n        },\n        // @ts-expect-error\n        reactApp,\n      ),\n    )\n\n    return { head, body }\n  }\n}\n", "import { createHeadManager, router } from '@inertiajs/core'\nimport { createElement, useEffect, useMemo, useState } from 'react'\nimport HeadContext from './HeadContext'\nimport PageContext from './PageContext'\n\nexport default function App({\n  children,\n  initialPage,\n  initialComponent,\n  resolveComponent,\n  titleCallback,\n  onHeadUpdate,\n}) {\n  const [current, setCurrent] = useState({\n    component: initialComponent || null,\n    page: initialPage,\n    key: null,\n  })\n\n  const headManager = useMemo(() => {\n    return createHeadManager(\n      typeof window === 'undefined',\n      titleCallback || ((title) => title),\n      onHeadUpdate || (() => {}),\n    )\n  }, [])\n\n  useEffect(() => {\n    router.init({\n      initialPage,\n      resolveComponent,\n      swapComponent: async ({ component, page, preserveState }) => {\n        setCurrent((current) => ({\n          component,\n          page,\n          key: preserveState ? current.key : Date.now(),\n        }))\n      },\n    })\n\n    router.on('navigate', () => headManager.forceUpdate())\n  }, [])\n\n  if (!current.component) {\n    return createElement(\n      HeadContext.Provider,\n      { value: headManager },\n      createElement(PageContext.Provider, { value: current.page }, null),\n    )\n  }\n\n  const renderChildren =\n    children ||\n    (({ Component, props, key }) => {\n      const child = createElement(Component, { key, ...props })\n\n      if (typeof Component.layout === 'function') {\n        return Component.layout(child)\n      }\n\n      if (Array.isArray(Component.layout)) {\n        return Component.layout\n          .concat(child)\n          .reverse()\n          .reduce((children, Layout) => createElement(Layout, { children, ...props }))\n      }\n\n      return child\n    })\n\n  return createElement(\n    HeadContext.Provider,\n    { value: headManager },\n    createElement(\n      PageContext.Provider,\n      { value: current.page },\n      renderChildren({\n        Component: current.component,\n        key: current.key,\n        props: current.page.props,\n      }),\n    ),\n  )\n}\n\nApp.displayName = 'Inertia'\n", "import { createContext } from 'react'\n\nconst headContext = createContext(undefined)\nheadContext.displayName = 'InertiaHeadContext'\n\nexport default headContext\n", "import { createContext } from 'react'\n\nconst pageContext = createContext(undefined)\npageContext.displayName = 'InertiaPageContext'\n\nexport default pageContext\n", "import React, { FunctionComponent, useContext, useEffect, useMemo } from 'react'\nimport HeadContext from './HeadContext'\n\ntype InertiaHeadProps = {\n  title?: string\n  children?: React.ReactNode\n}\n\ntype InertiaHead = FunctionComponent<InertiaHeadProps>\n\nconst Head: InertiaHead = function ({ children, title }) {\n  const headManager = useContext(HeadContext)\n  const provider = useMemo(() => headManager.createProvider(), [headManager])\n\n  useEffect(() => {\n    return () => {\n      provider.disconnect()\n    }\n  }, [provider])\n\n  function isUnaryTag(node) {\n    return (\n      [\n        'area',\n        'base',\n        'br',\n        'col',\n        'embed',\n        'hr',\n        'img',\n        'input',\n        'keygen',\n        'link',\n        'meta',\n        'param',\n        'source',\n        'track',\n        'wbr',\n      ].indexOf(node.type) > -1\n    )\n  }\n\n  function renderTagStart(node) {\n    const attrs = Object.keys(node.props).reduce((carry, name) => {\n      if (['head-key', 'children', 'dangerouslySetInnerHTML'].includes(name)) {\n        return carry\n      }\n      const value = node.props[name]\n      if (value === '') {\n        return carry + ` ${name}`\n      } else {\n        return carry + ` ${name}=\"${value}\"`\n      }\n    }, '')\n    return `<${node.type}${attrs}>`\n  }\n\n  function renderTagChildren(node) {\n    return typeof node.props.children === 'string'\n      ? node.props.children\n      : node.props.children.reduce((html, child) => html + renderTag(child), '')\n  }\n\n  function renderTag(node) {\n    let html = renderTagStart(node)\n    if (node.props.children) {\n      html += renderTagChildren(node)\n    }\n    if (node.props.dangerouslySetInnerHTML) {\n      html += node.props.dangerouslySetInnerHTML.__html\n    }\n    if (!isUnaryTag(node)) {\n      html += `</${node.type}>`\n    }\n    return html\n  }\n\n  function ensureNodeHasInertiaProp(node) {\n    return React.cloneElement(node, {\n      inertia: node.props['head-key'] !== undefined ? node.props['head-key'] : '',\n    })\n  }\n\n  function renderNode(node) {\n    return renderTag(ensureNodeHasInertiaProp(node))\n  }\n\n  function renderNodes(nodes) {\n    const computed = React.Children.toArray(nodes).filter((node) => node).map((node) => renderNode(node))\n    if (title && !computed.find((tag) => tag.startsWith('<title'))) {\n      computed.push(`<title inertia>${title}</title>`)\n    }\n    return computed\n  }\n\n  provider.update(renderNodes(children))\n\n  return null\n}\nexport default Head\n", "import {\n  FormDataConvertible,\n  mergeDataIntoQueryString,\n  Method,\n  PreserveStateOption,\n  Progress,\n  router,\n  shouldIntercept,\n} from '@inertiajs/core'\nimport { createElement, forwardRef, useCallback } from 'react'\n\nconst noop = () => undefined\n\ninterface BaseInertiaLinkProps {\n  as?: string\n  data?: Record<string, FormDataConvertible>\n  href: string\n  method?: Method\n  headers?: Record<string, string>\n  onClick?: (event: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent<HTMLAnchorElement>) => void\n  preserveScroll?: PreserveStateOption\n  preserveState?: PreserveStateOption\n  replace?: boolean\n  only?: string[]\n  onCancelToken?: (cancelToken: import('axios').CancelTokenSource) => void\n  onBefore?: () => void\n  onStart?: () => void\n  onProgress?: (progress: Progress) => void\n  onFinish?: () => void\n  onCancel?: () => void\n  onSuccess?: () => void\n  onError?: () => void\n  queryStringArrayFormat?: 'indices' | 'brackets'\n}\n\nexport type InertiaLinkProps = BaseInertiaLinkProps &\n  Omit<React.HTMLAttributes<HTMLElement>, keyof BaseInertiaLinkProps> &\n  Omit<React.AllHTMLAttributes<HTMLElement>, keyof BaseInertiaLinkProps>\n\ntype InertiaLink = React.FunctionComponent<InertiaLinkProps>\n\nconst Link: InertiaLink = forwardRef<unknown, InertiaLinkProps>(\n  (\n    {\n      children,\n      as = 'a',\n      data = {},\n      href,\n      method = 'get',\n      preserveScroll = false,\n      preserveState = null,\n      replace = false,\n      only = [],\n      headers = {},\n      queryStringArrayFormat = 'brackets',\n      onClick = noop,\n      onCancelToken = noop,\n      onBefore = noop,\n      onStart = noop,\n      onProgress = noop,\n      onFinish = noop,\n      onCancel = noop,\n      onSuccess = noop,\n      onError = noop,\n      ...props\n    },\n    ref,\n  ) => {\n    const visit = useCallback(\n      (event) => {\n        onClick(event)\n\n        if (shouldIntercept(event)) {\n          event.preventDefault()\n\n          router.visit(href, {\n            data,\n            method,\n            preserveScroll,\n            preserveState: preserveState ?? method !== 'get',\n            replace,\n            only,\n            headers,\n            onCancelToken,\n            onBefore,\n            onStart,\n            onProgress,\n            onFinish,\n            onCancel,\n            onSuccess,\n            onError,\n          })\n        }\n      },\n      [\n        data,\n        href,\n        method,\n        preserveScroll,\n        preserveState,\n        replace,\n        only,\n        headers,\n        onClick,\n        onCancelToken,\n        onBefore,\n        onStart,\n        onProgress,\n        onFinish,\n        onCancel,\n        onSuccess,\n        onError,\n      ],\n    )\n\n    as = as.toLowerCase()\n    method = method.toLowerCase() as Method\n    const [_href, _data] = mergeDataIntoQueryString(method, href || '', data, queryStringArrayFormat)\n    href = _href\n    data = _data\n\n    if (as === 'a' && method !== 'get') {\n      console.warn(\n        `Creating POST/PUT/PATCH/DELETE <a> links is discouraged as it causes \"Open Link in New Tab/Window\" accessibility issues.\\n\\nPlease specify a more appropriate element using the \"as\" attribute. For example:\\n\\n<Link href=\"${href}\" method=\"${method}\" as=\"button\">...</Link>`,\n      )\n    }\n\n    return createElement(\n      as,\n      {\n        ...props,\n        ...(as === 'a' ? { href } : {}),\n        ref,\n        onClick: visit,\n      },\n      children,\n    )\n  },\n)\nLink.displayName = 'InertiaLink'\n\nexport default Link\n", "import { FormDataConvertible, Method, Progress, router, VisitOptions } from '@inertiajs/core'\nimport isEqual from 'lodash.isequal'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport useRemember from './useRemember'\n\ntype setDataByObject<TForm> = (data: TForm) => void\ntype setDataByMethod<TForm> = (data: (previousData: TForm) => TForm) => void\ntype setDataByKeyValuePair<TForm> = <K extends keyof TForm>(key: K, value: TForm[K]) => void\ntype FormDataType = object;\n\nexport interface InertiaFormProps<TForm extends FormDataType> {\n  data: TForm\n  isDirty: boolean\n  errors: Partial<Record<keyof TForm, string>>\n  hasErrors: boolean\n  processing: boolean\n  progress: Progress | null\n  wasSuccessful: boolean\n  recentlySuccessful: boolean\n  setData: setDataByObject<TForm> & setDataByMethod<TForm> & setDataByKeyValuePair<TForm>\n  transform: (callback: (data: TForm) => TForm) => void\n  setDefaults(): void\n  setDefaults(field: keyof TForm, value: FormDataConvertible): void\n  setDefaults(fields: Partial<TForm>): void\n  reset: (...fields: (keyof TForm)[]) => void\n  clearErrors: (...fields: (keyof TForm)[]) => void\n  setError(field: keyof TForm, value: string): void\n  setError(errors: Record<keyof TForm, string>): void\n  submit: (method: Method, url: string, options?: VisitOptions) => void\n  get: (url: string, options?: VisitOptions) => void\n  patch: (url: string, options?: VisitOptions) => void\n  post: (url: string, options?: VisitOptions) => void\n  put: (url: string, options?: VisitOptions) => void\n  delete: (url: string, options?: VisitOptions) => void\n  cancel: () => void\n}\nexport default function useForm<TForm extends FormDataType>(initialValues?: TForm): InertiaFormProps<TForm>\nexport default function useForm<TForm extends FormDataType>(\n  rememberKey: string,\n  initialValues?: TForm,\n): InertiaFormProps<TForm>\nexport default function useForm<TForm extends FormDataType>(\n  rememberKeyOrInitialValues?: string | TForm,\n  maybeInitialValues?: TForm,\n): InertiaFormProps<TForm> {\n  const isMounted = useRef(null)\n  const rememberKey = typeof rememberKeyOrInitialValues === 'string' ? rememberKeyOrInitialValues : null\n  const [defaults, setDefaults] = useState(\n    (typeof rememberKeyOrInitialValues === 'string' ? maybeInitialValues : rememberKeyOrInitialValues) || ({} as TForm),\n  )\n  const cancelToken = useRef(null)\n  const recentlySuccessfulTimeoutId = useRef(null)\n  const [data, setData] = rememberKey ? useRemember(defaults, `${rememberKey}:data`) : useState(defaults)\n  const [errors, setErrors] = rememberKey\n    ? useRemember({} as Partial<Record<keyof TForm, string>>, `${rememberKey}:errors`)\n    : useState({} as Partial<Record<keyof TForm, string>>)\n  const [hasErrors, setHasErrors] = useState(false)\n  const [processing, setProcessing] = useState(false)\n  const [progress, setProgress] = useState(null)\n  const [wasSuccessful, setWasSuccessful] = useState(false)\n  const [recentlySuccessful, setRecentlySuccessful] = useState(false)\n  let transform = (data) => data\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  const submit = useCallback(\n    (method, url, options = {}) => {\n      const _options = {\n        ...options,\n        onCancelToken: (token) => {\n          cancelToken.current = token\n\n          if (options.onCancelToken) {\n            return options.onCancelToken(token)\n          }\n        },\n        onBefore: (visit) => {\n          setWasSuccessful(false)\n          setRecentlySuccessful(false)\n          clearTimeout(recentlySuccessfulTimeoutId.current)\n\n          if (options.onBefore) {\n            return options.onBefore(visit)\n          }\n        },\n        onStart: (visit) => {\n          setProcessing(true)\n\n          if (options.onStart) {\n            return options.onStart(visit)\n          }\n        },\n        onProgress: (event) => {\n          setProgress(event)\n\n          if (options.onProgress) {\n            return options.onProgress(event)\n          }\n        },\n        onSuccess: (page) => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n            setErrors({})\n            setHasErrors(false)\n            setWasSuccessful(true)\n            setRecentlySuccessful(true)\n            recentlySuccessfulTimeoutId.current = setTimeout(() => {\n              if (isMounted.current) {\n                setRecentlySuccessful(false)\n              }\n            }, 2000)\n          }\n\n          if (options.onSuccess) {\n            return options.onSuccess(page)\n          }\n        },\n        onError: (errors) => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n            setErrors(errors)\n            setHasErrors(true)\n          }\n\n          if (options.onError) {\n            return options.onError(errors)\n          }\n        },\n        onCancel: () => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n          }\n\n          if (options.onCancel) {\n            return options.onCancel()\n          }\n        },\n        onFinish: () => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n          }\n\n          cancelToken.current = null\n\n          if (options.onFinish) {\n            return options.onFinish()\n          }\n        },\n      }\n\n      if (method === 'delete') {\n        router.delete(url, { ..._options, data: transform(data) })\n      } else {\n        router[method](url, transform(data), _options)\n      }\n    },\n    [data, setErrors],\n  )\n\n  return {\n    data,\n    setData(keyOrData: keyof TForm | Function | TForm, maybeValue?: TForm[keyof TForm]) {\n      if (typeof keyOrData === 'string') {\n        setData({ ...data, [keyOrData]: maybeValue })\n      } else if (typeof keyOrData === 'function') {\n        setData((data) => keyOrData(data))\n      } else {\n        setData(keyOrData as TForm)\n      }\n    },\n    isDirty: !isEqual(data, defaults),\n    errors,\n    hasErrors,\n    processing,\n    progress,\n    wasSuccessful,\n    recentlySuccessful,\n    transform(callback) {\n      transform = callback\n    },\n    setDefaults(fieldOrFields?: keyof TForm | Partial<TForm>, maybeValue?: FormDataConvertible) {\n      if (typeof fieldOrFields === 'undefined') {\n        setDefaults(() => data)\n      } else {\n        setDefaults((defaults) => ({\n          ...defaults,\n          ...(typeof fieldOrFields === 'string' ? { [fieldOrFields]: maybeValue } : (fieldOrFields as TForm)),\n        }))\n      }\n    },\n    reset(...fields) {\n      if (fields.length === 0) {\n        setData(defaults)\n      } else {\n        setData(\n          (Object.keys(defaults) as Array<keyof TForm>)\n            .filter((key) => fields.includes(key))\n            .reduce(\n              (carry, key) => {\n                carry[key] = defaults[key]\n                return carry\n              },\n              { ...data },\n            ),\n        )\n      }\n    },\n    setError(fieldOrFields: keyof TForm | Record<keyof TForm, string>, maybeValue?: string) {\n      setErrors((errors) => {\n        const newErrors = {\n          ...errors,\n          ...(typeof fieldOrFields === 'string'\n            ? { [fieldOrFields]: maybeValue }\n            : (fieldOrFields as Record<keyof TForm, string>)),\n        }\n        setHasErrors(Object.keys(newErrors).length > 0)\n        return newErrors\n      })\n    },\n    clearErrors(...fields) {\n      setErrors((errors) => {\n        const newErrors = (Object.keys(errors) as Array<keyof TForm>).reduce(\n          (carry, field) => ({\n            ...carry,\n            ...(fields.length > 0 && !fields.includes(field) ? { [field]: errors[field] } : {}),\n          }),\n          {},\n        )\n        setHasErrors(Object.keys(newErrors).length > 0)\n        return newErrors\n      })\n    },\n    submit,\n    get(url, options) {\n      submit('get', url, options)\n    },\n    post(url, options) {\n      submit('post', url, options)\n    },\n    put(url, options) {\n      submit('put', url, options)\n    },\n    patch(url, options) {\n      submit('patch', url, options)\n    },\n    delete(url, options) {\n      submit('delete', url, options)\n    },\n    cancel() {\n      if (cancelToken.current) {\n        cancelToken.current.cancel()\n      }\n    },\n  }\n}\n", "import { router } from '@inertiajs/core'\nimport { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nexport default function useRemember<State>(\n  initialState: State,\n  key?: string,\n): [State, Dispatch<SetStateAction<State>>] {\n  const [state, setState] = useState(() => {\n    const restored = router.restore(key) as State\n\n    return restored !== undefined ? restored : initialState\n  })\n\n  useEffect(() => {\n    router.remember(state, key)\n  }, [state, key])\n\n  return [state, setState]\n}\n\n/** @deprecated use `useRemember` instead */\nexport function useRememberedState<State>(initialState: State, key?: string): [State, Dispatch<SetStateAction<State>>] {\n  console.warn(\n    'The \"useRememberedState\" hook has been deprecated and will be removed in a future release. Use \"useRemember\" instead.',\n  )\n  return useRemember(initialState, key)\n}\n", "import { Page, PageProps } from '@inertiajs/core'\nimport { useContext } from 'react'\nimport PageContext from './PageContext'\n\nexport default function usePage<TPageProps extends PageProps = PageProps>(): Page<TPageProps> {\n  const page = useContext(PageContext)\n\n  if (!page) {\n    throw new Error('usePage must be used within the Inertia component')\n  }\n\n  return page\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "import_react", "headContext", "createContext", "HeadContext_default", "pageContext", "PageContext_default", "App", "children", "initialPage", "initialComponent", "resolveComponent", "titleCallback", "onHeadUpdate", "current", "setCurrent", "useState", "headManager", "useMemo", "createHeadManager", "title", "useEffect", "router", "component", "page", "preserveState", "createElement", "renderChildren", "Component", "props", "key", "child", "Layout", "createInertiaApp", "id", "resolve", "setup", "progress", "render", "isServer", "el", "name", "module", "head", "reactApp", "elements", "setupProgress", "body", "Head", "useContext", "provider", "isUnaryTag", "node", "renderTagStart", "attrs", "carry", "value", "renderTagChildren", "html", "renderTag", "ensureNodeHasInertiaProp", "React", "renderNode", "renderNodes", "nodes", "computed", "tag", "Head_default", "noop", "Link", "forwardRef", "as", "data", "href", "method", "preserveScroll", "replace", "only", "headers", "queryStringArrayFormat", "onClick", "onCancelToken", "onBefore", "onStart", "onProgress", "onFinish", "onCancel", "onSuccess", "onError", "ref", "visit", "useCallback", "event", "shouldIntercept", "_href", "_data", "mergeDataIntoQueryString", "Link_default", "useRemember", "initialState", "state", "setState", "restored", "useForm", "rememberKeyOrInitialValues", "maybeInitialValues", "isMounted", "useRef", "rememberKey", "defaults", "setDefaults", "cancelToken", "recentlySuccessfulTimeoutId", "setData", "errors", "setErrors", "hasErrors", "setHasErrors", "processing", "setProcessing", "setProgress", "wasSuccessful", "setWasSuccessful", "recentlySuccessful", "setRecentlySuccessful", "transform", "submit", "url", "options", "_options", "token", "keyOrData", "maybeValue", "isEqual", "callback", "fieldOrFields", "fields", "newErrors", "field", "usePage", "Router"]
}
